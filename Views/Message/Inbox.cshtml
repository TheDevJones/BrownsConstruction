@model List<BCSApp.Models.Message>
@{
    ViewData["Title"] = "Inbox";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="min-h-screen bg-gray-50 py-6">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Inbox</h1>
                    <p class="mt-2 text-gray-600"><span id="unreadCount">@ViewBag.UnreadCount</span> unread messages</p>
                </div>
                <div class="flex space-x-3">
                    <!-- Search Button -->
                    <button onclick="showSearchLog()" class="inline-flex items-center px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                        <i class="fas fa-search mr-2"></i>
                        Search
                    </button>
                    <a href="/Message/Compose" class="inline-flex items-center px-4 py-2 bg-brand-blue text-white rounded-lg hover:bg-blue-600 transition-colors">
                        <i class="fas fa-pen mr-2"></i>
                        Compose
                    </a>
                </div>
            </div>
        </div>

        <!-- Search Log Modal -->
        <div id="searchLogModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-96">
                <div class="p-6 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-search-history mr-2 text-brand-orange"></i>
                            Search Messages
                        </h3>
                        <div class="flex items-center space-x-3">
                            <button onclick="clearMessageSearchLog()"
                                    class="text-sm text-gray-500 hover:text-red-500 transition-colors duration-200 flex items-center">
                                <i class="fas fa-trash mr-1"></i>
                                Clear All
                            </button>
                            <button onclick="hideSearchLog()"
                                    class="text-gray-400 hover:text-gray-600 transition-colors duration-200 text-xl">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Search Input -->
                    <div class="mt-4 relative">
                        <input id="messageSearchInput"
                               type="text"
                               placeholder="Search by sender, subject, content, or use filters like 'from:john project:home'"
                               class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-orange focus:border-transparent transition-all duration-200"
                               onkeyup="if(event.key === 'Enter') performMessageSearch()">
                        <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                            <i class="fas fa-search"></i>
                        </div>
                        <button onclick="performMessageSearch()"
                                class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-brand-orange text-white px-4 py-2 rounded-md hover:bg-orange-600 transition-colors duration-200">
                            Search
                        </button>
                    </div>

                    <!-- Search Tips -->
                    <div class="mt-3 text-xs text-gray-500">
                        <p><strong>Tips:</strong> Use "from:name", "subject:word", "has:project", "is:unread", "date:today"</p>
                    </div>
                </div>

                <!-- Recent Searches -->
                <div class="p-4 border-b border-gray-200">
                    <h4 class="text-sm font-medium text-gray-700 mb-3 flex items-center">
                        <i class="fas fa-clock mr-2"></i>
                        Recent Searches
                    </h4>
                    <div id="messageSearchLogItems" class="space-y-2 max-h-32 overflow-y-auto">
                        <!-- Search log items will be populated here -->
                    </div>
                </div>

                <!-- Quick Filters -->
                <div class="p-4">
                    <h4 class="text-sm font-medium text-gray-700 mb-3 flex items-center">
                        <i class="fas fa-filter mr-2"></i>
                        Quick Filters
                    </h4>
                    <div class="grid grid-cols-2 gap-2">
                        <button onclick="applyQuickFilter('unread')" class="flex items-center px-3 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                            <i class="fas fa-envelope mr-2 text-blue-500"></i>
                            Unread Only
                        </button>
                        <button onclick="applyQuickFilter('project')" class="flex items-center px-3 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                            <i class="fas fa-project-diagram mr-2 text-purple-500"></i>
                            Project Related
                        </button>
                        <button onclick="applyQuickFilter('alert')" class="flex items-center px-3 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                            <i class="fas fa-exclamation-triangle mr-2 text-red-500"></i>
                            Alerts
                        </button>
                        <button onclick="applyQuickFilter('today')" class="flex items-center px-3 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                            <i class="fas fa-calendar-day mr-2 text-green-500"></i>
                            Today
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Search Bar -->
        <div class="mb-6">
            <div class="bg-white rounded-lg shadow p-4">
                <div class="flex items-center space-x-4">
                    <div class="flex-1 relative">
                        <input id="quickSearchInput"
                               type="text"
                               placeholder="Type to search messages... (sender, subject, content)"
                               class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-orange focus:border-transparent transition-all duration-200"
                               onkeyup="debounceQuickSearch()">
                        <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                            <i class="fas fa-search"></i>
                        </div>
                        <button onclick="clearQuickSearch()"
                                id="clearQuickSearch"
                                class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 hidden">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <button onclick="showSearchLog()"
                            class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                            title="Advanced Search">
                        <i class="fas fa-cog"></i>
                    </button>
                </div>

                <!-- Search Suggestions -->
                <div id="searchSuggestions" class="hidden mt-3 p-3 bg-gray-50 rounded-lg">
                    <div class="flex flex-wrap gap-2">
                        <span class="text-xs text-gray-500">Try searching for:</span>
                        <button onclick="setQuickSearch('from:' + '@Model.FirstOrDefault()?.Sender.FirstName')" class="text-xs bg-white border border-gray-300 px-2 py-1 rounded hover:bg-gray-50">
                            from:@Model.FirstOrDefault()?.Sender.FirstName
                        </button>
                        <button onclick="setQuickSearch('project')" class="text-xs bg-white border border-gray-300 px-2 py-1 rounded hover:bg-gray-50">
                            has:project
                        </button>
                        <button onclick="setQuickSearch('is:unread')" class="text-xs bg-white border border-gray-300 px-2 py-1 rounded hover:bg-gray-50">
                            is:unread
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter Status -->
        <div id="filterStatus" class="hidden mb-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <i class="fas fa-filter text-blue-500 mr-2"></i>
                    <span id="filterText" class="text-blue-800 font-medium"></span>
                </div>
                <button onclick="clearFilters()" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                    Clear Filters
                </button>
            </div>
        </div>

        <!-- Search Results Summary -->
        <div id="searchResultsSummary" class="hidden mb-4 bg-green-50 border border-green-200 rounded-lg p-3">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <i class="fas fa-search text-green-500 mr-2"></i>
                    <span id="resultsCount" class="text-green-800 font-medium"></span>
                </div>
                <button onclick="clearSearch()" class="text-green-600 hover:text-green-800 text-sm font-medium">
                    Clear Search
                </button>
            </div>
        </div>

        <!-- Message Navigation -->
        <div class="bg-white shadow rounded-lg mb-6">
            <div class="flex border-b">
                <a href="/Message/Inbox" class="px-6 py-3 text-sm font-medium text-brand-blue border-b-2 border-brand-blue">
                    <i class="fas fa-inbox mr-2"></i>Inbox (@ViewBag.UnreadCount)
                </a>
                <a href="/Message/Sent" class="px-6 py-3 text-sm font-medium text-gray-600 hover:text-gray-900">
                    <i class="fas fa-paper-plane mr-2"></i>Sent
                </a>
                <a href="/Message/Conversations" class="px-6 py-3 text-sm font-medium text-gray-600 hover:text-gray-900">
                    <i class="fas fa-comments mr-2"></i>Conversations
                </a>
            </div>
        </div>

        <!-- Messages List -->
        <div class="bg-white shadow rounded-lg">
            <div id="messagesContainer">
                @if (Model.Any())
                {
                    <div class="divide-y divide-gray-200" id="messagesList">
                        @foreach (var message in Model)
                        {
                            <div class="message-item block hover:bg-gray-50 transition-colors"
                                 data-sender="@($"{message.Sender.FirstName} {message.Sender.LastName}")"
                                 data-sender-first="@message.Sender.FirstName"
                                 data-sender-last="@message.Sender.LastName"
                                 data-subject="@message.Subject"
                                 data-content="@message.Content"
                                 data-isread="@message.IsRead.ToString().ToLower()"
                                 data-project="@(message.ProjectId != null ? "true" : "false")"
                                 data-maintenance="@(message.MaintenanceRequestId != null ? "true" : "false")"
                                 data-task="@(message.TaskId != null ? "true" : "false")"
                                 data-alert="@(message.MessageType == "Alert" ? "true" : "false")"
                                 data-date="@message.CreatedAt.ToString("yyyy-MM-dd")"
                                 data-time="@message.CreatedAt.ToString("HH:mm")">
                                <a href="/Message/Details/@message.Id" class="block px-6 py-4">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center flex-1 min-w-0">
                                            <!-- Avatar -->
                                            <div class="flex-shrink-0">
                                                <div class="w-10 h-10 bg-gradient-to-r from-brand-navy to-brand-blue rounded-full flex items-center justify-center">
                                                    <span class="text-white font-medium text-sm">
                                                        @message.Sender.FirstName.Substring(0, 1)@message.Sender.LastName.Substring(0, 1)
                                                    </span>
                                                </div>
                                            </div>

                                            <!-- Message Info -->
                                            <div class="ml-4 flex-1 min-w-0">
                                                <div class="flex items-center justify-between">
                                                    <p class="text-sm font-medium text-gray-900 truncate @(!message.IsRead ? "font-bold" : "")">
                                                        @message.Sender.FirstName @message.Sender.LastName
                                                        @if (!message.IsRead)
                                                        {
                                                            <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                                                                New
                                                            </span>
                                                        }
                                                    </p>
                                                    <p class="text-sm text-gray-500 message-date">
                                                        @if (message.CreatedAt.Date == DateTime.Now.Date)
                                                        {
                                                            @message.CreatedAt.ToString("HH:mm")
                                                        }
                                                        else if (message.CreatedAt.Date == DateTime.Now.AddDays(-1).Date)
                                                        {
                                                            <text>Yesterday</text>
                                                        }
                                                        else
                                                        {
                                                            @message.CreatedAt.ToString("MMM dd")
                                                        }
                                                    </p>
                                                </div>
                                                <p class="text-sm text-gray-900 truncate @(!message.IsRead ? "font-semibold" : "") message-subject">
                                                    @message.Subject
                                                </p>
                                                <p class="text-sm text-gray-500 truncate mt-1 message-content">
                                                    @message.Content
                                                </p>

                                                <!-- Tags -->
                                                <div class="flex items-center space-x-2 mt-2">
                                                    @if (message.ProjectId != null)
                                                    {
                                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800">
                                                            <i class="fas fa-project-diagram mr-1"></i>Project
                                                        </span>
                                                    }
                                                    @if (message.MaintenanceRequestId != null)
                                                    {
                                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                                                            <i class="fas fa-tools mr-1"></i>Maintenance
                                                        </span>
                                                    }
                                                    @if (message.TaskId != null)
                                                    {
                                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                                            <i class="fas fa-tasks mr-1"></i>Task
                                                        </span>
                                                    }
                                                    @if (message.MessageType == "Alert")
                                                    {
                                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                                                            <i class="fas fa-exclamation-triangle mr-1"></i>Alert
                                                        </span>
                                                    }
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Arrow Icon -->
                                        <div class="ml-4">
                                            <i class="fas fa-chevron-right text-gray-400"></i>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="px-6 py-12 text-center">
                        <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                            <i class="fas fa-inbox text-gray-400 text-2xl"></i>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No messages</h3>
                        <p class="text-gray-500 mb-6">Your inbox is empty.</p>
                        <a href="/Message/Compose" class="inline-flex items-center px-4 py-2 bg-brand-blue text-white rounded-lg hover:bg-blue-600 transition-colors">
                            <i class="fas fa-pen mr-2"></i>
                            Compose Message
                        </a>
                    </div>
                }
            </div>

            <!-- No Results Message -->
            <div id="noResults" class="hidden px-6 py-12 text-center">
                <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                    <i class="fas fa-search text-gray-400 text-2xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No messages found</h3>
                <p class="text-gray-500 mb-6">Try adjusting your search criteria or clearing filters.</p>
                <button onclick="clearAll()" class="inline-flex items-center px-4 py-2 bg-brand-blue text-white rounded-lg hover:bg-blue-600 transition-colors">
                    <i class="fas fa-times mr-2"></i>
                    Clear All
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Message-specific search log functionality
    let messageSearchLog = JSON.parse(localStorage.getItem('messageSearchLog') || '[]');
    const MAX_MESSAGE_LOG_ITEMS = 8;
    let currentSearchQuery = '';
    let currentFilter = null;
    let searchTimeout = null;

    // Debounce function for real-time search
    function debounceQuickSearch() {
        const clearBtn = document.getElementById('clearQuickSearch');
        const query = document.getElementById('quickSearchInput').value.trim();

        if (query) {
            clearBtn.classList.remove('hidden');
        } else {
            clearBtn.classList.add('hidden');
            clearSearch();
            return;
        }

        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            performTextSearch(query);
        }, 300);
    }

    function performTextSearch(query) {
        if (!query || query.trim() === '') {
            clearSearch();
            return;
        }

        currentSearchQuery = query.trim();
        addToMessageSearchLog(currentSearchQuery, 'text');
        filterMessagesByText(currentSearchQuery);
    }

    function filterMessagesByText(query) {
        const messages = document.querySelectorAll('.message-item');
        let visibleCount = 0;
        const today = new Date().toISOString().split('T')[0];

        // Parse advanced search operators
        const searchTerms = parseSearchQuery(query);

        messages.forEach(message => {
            const sender = message.dataset.sender.toLowerCase();
            const senderFirst = message.dataset.senderFirst.toLowerCase();
            const senderLast = message.dataset.senderLast.toLowerCase();
            const subject = message.dataset.subject.toLowerCase();
            const content = message.dataset.content.toLowerCase();
            const isRead = message.dataset.isread === 'true';
            const hasProject = message.dataset.project === 'true';
            const hasMaintenance = message.dataset.maintenance === 'true';
            const hasTask = message.dataset.task === 'true';
            const isAlert = message.dataset.alert === 'true';
            const messageDate = message.dataset.date;

            let shouldShow = true;

            // Apply advanced filters
            if (searchTerms.from.length > 0) {
                shouldShow = shouldShow && searchTerms.from.some(term =>
                    sender.includes(term) || senderFirst.includes(term) || senderLast.includes(term)
                );
            }

            if (searchTerms.subject.length > 0) {
                shouldShow = shouldShow && searchTerms.subject.some(term =>
                    subject.includes(term)
                );
            }

            if (searchTerms.has.length > 0) {
                searchTerms.has.forEach(hasTerm => {
                    switch(hasTerm) {
                        case 'project':
                            shouldShow = shouldShow && hasProject;
                            break;
                        case 'maintenance':
                            shouldShow = shouldShow && hasMaintenance;
                            break;
                        case 'task':
                            shouldShow = shouldShow && hasTask;
                            break;
                    }
                });
            }

            if (searchTerms.is.length > 0) {
                searchTerms.is.forEach(isTerm => {
                    switch(isTerm) {
                        case 'unread':
                            shouldShow = shouldShow && !isRead;
                            break;
                        case 'alert':
                            shouldShow = shouldShow && isAlert;
                            break;
                    }
                });
            }

            if (searchTerms.date.length > 0) {
                searchTerms.date.forEach(dateTerm => {
                    switch(dateTerm) {
                        case 'today':
                            shouldShow = shouldShow && messageDate === today;
                            break;
                        case 'yesterday':
                            const yesterday = new Date();
                            yesterday.setDate(yesterday.getDate() - 1);
                            const yesterdayStr = yesterday.toISOString().split('T')[0];
                            shouldShow = shouldShow && messageDate === yesterdayStr;
                            break;
                    }
                });
            }

            // Apply general text search
            if (searchTerms.general.length > 0 && shouldShow) {
                shouldShow = searchTerms.general.some(term =>
                    sender.includes(term) ||
                    subject.includes(term) ||
                    content.includes(term)
                );
            }

            if (shouldShow) {
                message.style.display = 'block';
                visibleCount++;

                // Highlight matching text
                highlightMatches(message, searchTerms);
            } else {
                message.style.display = 'none';
                removeHighlights(message);
            }
        });

        updateSearchResults(visibleCount, query);
    }

    function parseSearchQuery(query) {
        const terms = {
            from: [],
            subject: [],
            has: [],
            is: [],
            date: [],
            general: []
        };

        const parts = query.toLowerCase().split(' ');

        parts.forEach(part => {
            if (part.startsWith('from:')) {
                terms.from.push(part.replace('from:', '').trim());
            } else if (part.startsWith('subject:')) {
                terms.subject.push(part.replace('subject:', '').trim());
            } else if (part.startsWith('has:')) {
                terms.has.push(part.replace('has:', '').trim());
            } else if (part.startsWith('is:')) {
                terms.is.push(part.replace('is:', '').trim());
            } else if (part.startsWith('date:')) {
                terms.date.push(part.replace('date:', '').trim());
            } else if (part.trim()) {
                terms.general.push(part.trim());
            }
        });

        return terms;
    }

    function highlightMatches(message, searchTerms) {
        // Remove existing highlights
        removeHighlights(message);

        const allTerms = [
            ...searchTerms.general,
            ...searchTerms.from,
            ...searchTerms.subject
        ];

        if (allTerms.length === 0) return;

        // Highlight in subject
        const subjectElement = message.querySelector('.message-subject');
        if (subjectElement) {
            let subjectText = subjectElement.textContent;
            allTerms.forEach(term => {
                if (term) {
                    const regex = new RegExp(term, 'gi');
                    subjectText = subjectText.replace(regex, match =>
                        `<mark class="bg-yellow-200 font-semibold">${match}</mark>`
                    );
                }
            });
            subjectElement.innerHTML = subjectText;
        }

        // Highlight in content
        const contentElement = message.querySelector('.message-content');
        if (contentElement) {
            let contentText = contentElement.textContent;
            allTerms.forEach(term => {
                if (term) {
                    const regex = new RegExp(term, 'gi');
                    contentText = contentText.replace(regex, match =>
                        `<mark class="bg-yellow-200 font-semibold">${match}</mark>`
                    );
                }
            });
            contentElement.innerHTML = contentText;
        }
    }

    function removeHighlights(message) {
        const subjectElement = message.querySelector('.message-subject');
        const contentElement = message.querySelector('.message-content');

        if (subjectElement) {
            subjectElement.innerHTML = subjectElement.textContent;
        }
        if (contentElement) {
            contentElement.innerHTML = contentElement.textContent;
        }
    }

    function updateSearchResults(visibleCount, query) {
        const noResults = document.getElementById('noResults');
        const messagesList = document.getElementById('messagesList');
        const searchResultsSummary = document.getElementById('searchResultsSummary');
        const resultsCount = document.getElementById('resultsCount');

        if (visibleCount === 0) {
            if (messagesList) messagesList.style.display = 'none';
            noResults.classList.remove('hidden');
            searchResultsSummary.classList.add('hidden');
        } else {
            if (messagesList) messagesList.style.display = 'block';
            noResults.classList.add('hidden');
            searchResultsSummary.classList.remove('hidden');
            resultsCount.textContent = `Found ${visibleCount} message${visibleCount !== 1 ? 's' : ''} for "${query}"`;
        }

        updateFilteredUnreadCount();
    }

    function setQuickSearch(query) {
        document.getElementById('quickSearchInput').value = query;
        document.getElementById('clearQuickSearch').classList.remove('hidden');
        performTextSearch(query);
    }

    function clearQuickSearch() {
        document.getElementById('quickSearchInput').value = '';
        document.getElementById('clearQuickSearch').classList.add('hidden');
        clearSearch();
    }

    function clearSearch() {
        currentSearchQuery = '';
        const messages = document.querySelectorAll('.message-item');
        messages.forEach(message => {
            message.style.display = 'block';
            removeHighlights(message);
        });

        document.getElementById('searchResultsSummary').classList.add('hidden');
        document.getElementById('noResults').classList.add('hidden');
        const messagesList = document.getElementById('messagesList');
        if (messagesList) messagesList.style.display = 'block';

        updateFilteredUnreadCount();
    }

    function clearAll() {
        clearSearch();
        clearFilters();
    }

    // ... (keep all the existing functions from previous code for search log, quick filters, etc.)

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        displayMessageSearchLog();

        // Show search suggestions on focus
        const quickSearchInput = document.getElementById('quickSearchInput');
        const searchSuggestions = document.getElementById('searchSuggestions');

        if (quickSearchInput && searchSuggestions) {
            quickSearchInput.addEventListener('focus', function() {
                searchSuggestions.classList.remove('hidden');
            });

            quickSearchInput.addEventListener('blur', function() {
                setTimeout(() => {
                    searchSuggestions.classList.add('hidden');
                }, 200);
            });
        }
    });

    // ... (keep all other existing functions)
</script>